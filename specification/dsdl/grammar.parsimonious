definition  = line (end_of_line line)*  # An empty file is a valid definition. Trailing end-of-line is optional.
line        = statement? _? comment?    # An empty line is a valid line.
comment     = ~r"#[^\r\n]*"
end_of_line = ~r"\r?\n"                 # Unix/Windows
_           = ~r"[ \t]+"                # Whitespace

identifier = ~r"[a-zA-Z_][a-zA-Z0-9_]*"

# ==================================================== Statements ====================================================

statement = statement_directive
          / statement_service_response_marker
          / statement_attribute

statement_attribute = statement_constant
                    / statement_field
                    / statement_padding_field

statement_constant      = type _ identifier _? "=" _? expression
statement_field         = type _ identifier
statement_padding_field = type_void ""  # The trailing empty symbol is to prevent the node from being optimized away.

statement_service_response_marker = ~r"---+"  # Separates request/response, specifies that the definition is a service.

statement_directive = statement_directive_with_expression
                    / statement_directive_without_expression
statement_directive_with_expression    = "@" identifier _ expression  # The expression type shall match the directive.
statement_directive_without_expression = "@" identifier

# ==================================================== Data types ====================================================

type = type_array
     / type_scalar

type_array = type_array_variable_inclusive
           / type_array_variable_exclusive
           / type_array_fixed

type_array_variable_inclusive = type_scalar _? "[" _? "<=" _? expression _? "]"  # Expression shall yield integer.
type_array_variable_exclusive = type_scalar _? "[" _? "<"  _? expression _? "]"
type_array_fixed              = type_scalar _? "[" _?         expression _? "]"

type_scalar = type_versioned
            / type_primitive
            / type_void

type_versioned         = identifier ("." identifier)* "." type_version_specifier
type_version_specifier = literal_integer_decimal "." literal_integer_decimal

type_primitive = type_primitive_boolean
               / type_primitive_byte
               / type_primitive_utf8
               / type_primitive_truncated
               / type_primitive_saturated

type_primitive_boolean   = "bool"
type_primitive_byte      = "byte"
type_primitive_utf8      = "utf8"
type_primitive_truncated =  "truncated" _   type_primitive_name
type_primitive_saturated = ("saturated" _)? type_primitive_name     # Defaults to this.

type_primitive_name = type_primitive_name_unsigned_integer
                    / type_primitive_name_signed_integer
                    / type_primitive_name_floating_point

type_primitive_name_unsigned_integer = "uint"  type_bit_length_suffix
type_primitive_name_signed_integer   = "int"   type_bit_length_suffix
type_primitive_name_floating_point   = "float" type_bit_length_suffix

type_void = "void" type_bit_length_suffix

type_bit_length_suffix = ~r"[1-9]\d*"

# ==================================================== Expressions ====================================================

expression = ex_logical    # Aliased for clarity.

expression_list = (expression (_? "," _? expression)*)?     # May be empty.

expression_parenthesized = "(" _? expression _? ")"         # Used for managing precedence.

expression_atom = expression_parenthesized                  # Ordering matters.
                / type
                / literal
                / identifier

# Operators. The precedence relations are expressed in the rules; the order here is from lower to higher.
# Operators that share common prefix (e.g. < and <=) are arranged so that the longest form is specified first.
ex_logical        = ex_logical_not    (_? op2_log _? ex_logical_not)*
ex_logical_not    = op1_form_log_not / ex_comparison
ex_comparison     = ex_bitwise        (_? op2_cmp _? ex_bitwise)*
ex_bitwise        = ex_additive       (_? op2_bit _? ex_additive)*
ex_additive       = ex_multiplicative (_? op2_add _? ex_multiplicative)*
ex_multiplicative = ex_inversion      (_? op2_mul _? ex_inversion)*
ex_inversion      = op1_form_inv_pos / op1_form_inv_neg / ex_exponential
ex_exponential    = ex_attribute      (_? op2_exp _? ex_inversion)?     # Right recursion
ex_attribute      = expression_atom   (_? op2_attrib _? identifier)*

# Unary operator forms are moved into separate rules for ease of parsing.
op1_form_log_not = "!" _? ex_logical_not    # Right recursion
op1_form_inv_pos = "+" _? ex_exponential
op1_form_inv_neg = "-" _? ex_exponential

# Logical operators; defined for booleans.
op2_log = op2_log_or / op2_log_and
op2_log_or  = "||"
op2_log_and = "&&"

# Comparison operators.
op2_cmp = op2_cmp_equ / op2_cmp_geq / op2_cmp_leq / op2_cmp_neq / op2_cmp_lss / op2_cmp_grt  # Ordering is important.
op2_cmp_equ = "=="
op2_cmp_neq = "!="
op2_cmp_leq = "<="
op2_cmp_geq = ">="
op2_cmp_lss = "<"
op2_cmp_grt = ">"

# Bitwise integer manipulation operators.
op2_bit = op2_bit_or / op2_bit_xor / op2_bit_and
op2_bit_or  = "|"
op2_bit_xor = "^"
op2_bit_and = "&"

# Additive operators.
op2_add = op2_add_add / op2_add_sub
op2_add_add = "+"
op2_add_sub = "-"

# Multiplicative operators.
op2_mul = op2_mul_mul / op2_mul_div / op2_mul_mod  # Ordering is important.
op2_mul_mul = "*"
op2_mul_div = "/"
op2_mul_mod = "%"

# Exponential operators.
op2_exp = op2_exp_pow
op2_exp_pow = "**"

# The most tightly bound binary operator - attribute reference.
op2_attrib = "."

# ===================================================== Literals =====================================================

literal = literal_set           # Ordering is important to avoid ambiguities.
        / literal_real
        / literal_integer
        / literal_string
        / literal_boolean

# Set.
literal_set = "{" _? expression_list _? "}"

# Integer.
literal_integer = literal_integer_binary
                / literal_integer_octal
                / literal_integer_hexadecimal
                / literal_integer_decimal
literal_integer_binary      = ~r"0[bB](_?(0|1))+"
literal_integer_octal       = ~r"0[oO](_?[0-7])+"
literal_integer_hexadecimal = ~r"0[xX](_?[0-9a-fA-F])+"
literal_integer_decimal     = ~r"(0(_?0)*)+|([1-9](_?[0-9])*)"

# Real. Exponent notation is defined first to avoid ambiguities.
literal_real = literal_real_exponent_notation
             / literal_real_point_notation
literal_real_exponent_notation = (literal_real_point_notation / literal_real_digits) literal_real_exponent
literal_real_point_notation    = (literal_real_digits? literal_real_fraction) / (literal_real_digits ".")
literal_real_fraction          = "." literal_real_digits
literal_real_exponent          = ~r"[eE][+-]?" literal_real_digits
literal_real_digits            = ~r"[0-9](_?[0-9])*"

# String.
literal_string = literal_string_single_quoted
               / literal_string_double_quoted
literal_string_single_quoted = ~r"'[^'\\]*(\\[^\r\n][^'\\]*)*'"
literal_string_double_quoted = ~r'"[^"\\]*(\\[^\r\n][^"\\]*)*"'

# Boolean.
literal_boolean = literal_boolean_true
                / literal_boolean_false
literal_boolean_true  = "true"
literal_boolean_false = "false"
